linters:
  enable-all: true
  disable:
    - cyclop # we keep a tab on function length ourselves
    - deadcode # deprecated
    - depguard # we review our dependencies in pull requests
    - dupl # too many false positives
    - exhaustivestruct # abandoned
    - forbidigo # Git Town prints a lot to the CLI
    # - funlen # we keep track of this via code reviews
    - gci # we prefer keeping import statements as one blocks without empty lines
    # - gocognit # we keep track of this via code reviews
    - goconst # tests contain a ton of hard-coded test strings, for example branch names
    # - gocyclo # we keep track of this via code reviews
    - godox # we allow todo comments
    - golint # deprecated
    - gomnd # tests contain hard-coded test data that wouldn't make sense to extract into constants
    - ifshort # this enforces less readable code
    - interfacer # deprecated
    - lll # we aren't enforcing a line length at this point
    # - maintidx # we keep complexity under check with code reviews
    - maligned # deprecated
    - musttag # we document JSON serialization via unit tests
    - nakedret # not useful
    # - nestif # we keep complexity under check with code reviews
    - nonamedreturns # they are useful in too many situations
    - nlreturn # this forces unnecessary empty lines in function bodies
    - nosnakecase # deprecated
    - promlinter # not using Prometheus
    - protogetter # not using Protobuffs
    - scopelint # deprecated
    - structcheck # deprecated
    - varcheck # deprecated
    - varnamelen # not really useful
    - wrapcheck # too many false positives for return values defined in internal packages
    - wsl # this linter creates too many false positives, our policy is to not have any empty lines in code blocks
    - paralleltest # there's no need to parallelise all the tests, only slow ones

linters-settings:
  ireturn:
    allow:
      - error
      - stdlib
  tagliatelle:
    case:
      use-field-name: true
      rules:
        json: pascal # set to pascal to maintain backwards compatibility

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - Using the variable on range scope `(input|expected)` in function literal
  exclude-rules:
    - linters:
        - goerr113
      text: "do not define dynamic errors"
    - text: receiver name should be a reflection of its identity
      linters:
        - stylecheck
    - text: receiver name should be a reflection of its identity
      linters:
        - revive
    - text: is missing field undeclaredOpcodeMethods
      linters:
        - exhaustruct
    - text: (cobra.Command|subshell.Options|gitea.*Options|github.*Options|gitlab.*Options|godog.Options) is missing fields?
      linters:
        - exhaustruct
    - linters:
        - exhaustruct
      text: promptui.(Prompt|PromptTemplates) is missing fields
    - linters:
        - exhaustruct
      text: doc.(GenManHeader) is missing fields
    - linters:
        - exhaustruct
      text: dialog.(TextPromptArgs) is missing fields
    - linters:
        - predeclared
      text: package name print has same name as predeclared identifier
    - path: src/internal/git-town/token.go # it's named as token, but is just the key
      text: "G101: Potential hardcoded credentials"
      linters:
        - gosec
    - path: src/internal/styles/
      linters:
        - gochecknoglobals
    - path: src/internal/messages/ # easier to read message name
      text: (don't|should not) use underscores
      linters:
        - revive
        - stylecheck
